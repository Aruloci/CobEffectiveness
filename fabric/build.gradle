plugins {
    id 'dev.architectury.loom'
    id 'architectury-plugin'
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    enableTransitiveAccessWideners.set(true)

    mixin {
        defaultRefmapName.set("mixins.${project.name}.refmap.json")
    }

    runs {
        client {
            property "fabric.development.mapping-namespace", "intermediary"

            // property "fabric.log.level", "debug"
        }
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // shadow-bundled common code
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"
    modImplementation(fabricApi.module("fabric-command-api-v2", "$rootProject.fabric_api_version"))

    // Kotlin (Fabric Language Kotlin)
    modImplementation "net.fabricmc:fabric-language-kotlin:${rootProject.fabric_kotlin_version}"

    // Cobblemon (MDK coordinates)
    modImplementation("com.cobblemon:fabric:${rootProject.cobblemon_version}") { transitive = false }

    // Architectury common wiring
    common(project(path: ':common', configuration: 'namedElements')) { transitive = false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    // tests (optional; requires junit_version in gradle.properties)
//    testImplementation "org.junit.jupiter:junit-jupiter-api:$rootProject.junit_version"
//    testRuntimeOnly  "org.junit.jupiter:junit-jupiter-engine:$rootProject.junit_version"
}

processResources {
    inputs.property 'version', project.version
    filesMatching('fabric.mod.json') {
        expand(project.properties)
    }
}

tasks.named('jar') {
    archiveClassifier = 'dev-slim'
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    dependsOn shadowJar
    inputFile.set shadowJar.archiveFile
}

// copy to mods folder as running from IDE doesn't work
tasks.register('copyToMinecraft', Copy) {
    dependsOn remapJar
    from remapJar.archiveFile
    into "${System.getProperty('user.home')}$rootProject.mods_folder"

    // always overwrite, even if file already exists
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    outputs.upToDateWhen { false }
}

build.finalizedBy copyToMinecraft
